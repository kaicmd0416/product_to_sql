================================================================================
                        PRODUCT TO SQL 项目文档
================================================================================

项目概述：
本项目是一个金融产品数据处理系统，负责将瑞锐(RR)、兴业(XY)、仁瑞(RENR)三个金融机构的
产品数据（股票持仓、期货持仓、产品信息）进行标准化处理并保存到SQL数据库中。

================================================================================
                                1. 项目结构
================================================================================

product_to_sql/
├── global_setting/
│   ├── global_dic.py                    # 全局配置管理
│   ├── productInfo_path_config.json     # 路径配置
│   └── productInfo_sql.yaml            # SQL表结构配置
├── product_to_sql.py                   # 核心数据处理
├── running_main.py                     # 主运行控制
└── *.bat                              # 批处理文件

================================================================================
                                2. 核心模块分析
================================================================================

2.1 全局配置模块 (global_setting/global_dic.py)
===============================================

init()
- 输入：无
- 输出：bool (初始化是否成功)
- 功能：从JSON配置文件加载全局配置

get(key)
- 输入：key (str) - 配置键名
- 输出：any - 配置值（文件路径或SQL查询语句）
- 功能：根据数据源模式返回对应值

set(key, value)
- 输入：key (str), value (any)
- 输出：无
- 功能：动态设置全局配置

2.2 数据处理模块 (product_to_sql.py)
====================================

标准化函数：
standardize_column_names_stock(df)     # 股票数据列名标准化
standardize_column_names_future(df)    # 期货数据列名标准化  
standardize_column_names_info(df)      # 产品信息列名标准化

产品处理类：

rrProduct_to_sql (瑞锐产品)
- __init__(product_type, is_daily)
- stockHolding_saving() - 保存股票持仓
- futureHolding_saving() - 保存期货持仓
- InfoHolding_saving() - 保存产品信息
- rr_sql_saving_main() - 主保存流程

xyProduct_to_sql (兴业产品)
- __init__(is_daily) - 产品代码固定'SGS958'
- read_csv_file(file_name) - 读取特殊格式CSV
- stockHolding_saving() - 保存股票持仓
- futureHolding_saving() - 保存期货持仓
- InfoHolding_saving() - 保存产品信息
- xy_sql_saving_main() - 主保存流程

renrProduct_to_sql (仁瑞产品)
- __init__(is_daily) - 产品代码固定'SLA626'
- read_csv_file(file_name) - 读取特殊格式CSV
- stockHolding_saving() - 保存股票持仓
- InfoHolding_saving() - 保存产品信息
- futureHolding_saving() - 保存期货持仓
- renrui_sql_saving_main() - 主保存流程

2.3 主运行控制模块 (running_main.py)
====================================

辅助函数：
dailydata_getting(data_type, product_code) - 检查每日数据是否存在
temptable_manage(data_type, product_code) - 检查临时表数据是否存在

主运行函数：
rr_running_main() - 瑞锐产品处理主流程
xy_running_main() - 兴业产品处理主流程
renr_running_main() - 仁瑞产品处理主流程
xy_future_running_main() - 兴业期货处理主流程
renr_future_running_main() - 仁瑞期货处理主流程

时间控制逻辑：
- 9:15前：检查并创建临时表
- 交易时间：执行数据保存
- 15:30后：检查并保存每日数据

================================================================================
                                3. 函数关系图
================================================================================

调用层次结构：
running_main.py (主控制层)
├── dailydata_getting() → gt.data_getting()
├── temptable_manage() → gt.data_getting()
├── rr_running_main()
│   ├── temptable_manage() → gt.table_manager()
│   ├── rrProduct_to_sql.rr_sql_saving_main()
│   │   ├── stockHolding_saving()
│   │   │   ├── glv.get() → 获取文件路径
│   │   │   ├── gt.readcsv() → 读取CSV文件
│   │   │   ├── standardize_column_names_stock() → 标准化列名
│   │   │   ├── gt.sqlSaving_main() → 创建SQL保存对象
│   │   │   └── sm.df_to_sql() → 保存到数据库
│   │   ├── futureHolding_saving() (类似流程)
│   │   └── InfoHolding_saving() (类似流程)
│   └── dailydata_getting() → 检查每日数据
├── xy_running_main() (类似流程)
├── renr_running_main() (类似流程)
├── xy_future_running_main() (类似流程)
└── renr_future_running_main() (类似流程)

数据流向：
原始数据文件 → 标准化处理 → 数据库保存
     ↓              ↓           ↓
glv.get() → standardize_*() → gt.sqlSaving_main()
     ↓              ↓           ↓
文件路径 → 标准DataFrame → SQL表

================================================================================
                                4. 流程图
================================================================================

主程序执行流程：
开始 → 检查当前时间 → 时间判断分支
                    ↓
┌─────────────────────────────────────────────────────────┐
│ 9:15前 (交易前准备)：                                   │
│ ├── 检查临时表是否存在                                  │
│ ├── 如果不存在，创建临时表                              │
│ └── 执行临时数据保存                                    │
│                                                         │
│ 交易时间 (9:15-15:30)：                                 │
│ ├── 执行数据保存操作                                    │
│ └── 更新临时表数据                                      │
│                                                         │
│ 15:30后 (交易后处理)：                                  │
│ ├── 检查每日数据是否存在                                │
│ ├── 如果不存在，保存到正式表                            │
│ └── 完成每日数据处理                                    │
└─────────────────────────────────────────────────────────┘
                    ↓
结束

数据处理详细流程：
开始 → 获取产品代码列表 → 对每个产品执行：
                    ↓
┌─────────────────────────────────────────────────────────┐
│ 1. 数据读取阶段：                                       │
│    ├── 获取文件路径 (glv.get())                         │
│    ├── 扫描目录获取最新文件                             │
│    ├── 验证文件日期                                     │
│    └── 读取CSV文件 (gt.readcsv())                       │
│                                                         │
│ 2. 数据标准化阶段：                                     │
│    ├── 列名标准化 (standardize_*())                     │
│    ├── 数据类型转换                                     │
│    ├── 添加系统字段                                     │
│    └── 列顺序调整                                       │
│                                                         │
│ 3. 数据库保存阶段：                                     │
│    ├── 创建SQL保存对象 (gt.sqlSaving_main())            │
│    ├── 执行数据保存 (sm.df_to_sql())                    │
│    └── 异常处理                                         │
└─────────────────────────────────────────────────────────┘
                    ↓
结束

异常处理流程：
数据处理开始 → try: 执行数据操作 → 异常类型判断：
                    ↓
┌─────────────────────────────────────────────────────────┐
│ ValueError: 文件日期不匹配 → 打印错误信息 → 跳过当前产品  │
│ FileNotFoundError: 文件不存在 → 打印错误信息 → 跳过当前产品│
│ DatabaseError: 数据库连接失败 → 打印错误信息 → 跳过当前产品│
│ 其他异常 → 打印错误信息 → 继续处理下一个产品            │
└─────────────────────────────────────────────────────────┘
                    ↓
继续处理下一个产品或结束

================================================================================
                                5. 结构图
================================================================================

系统架构图：
┌─────────────────────────────────────────────────────────────────────────────┐
│                              产品数据处理系统                                │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐        │
│  │   配置管理模块   │    │   数据处理模块   │    │   运行控制模块   │        │
│  │ global_dic.py   │    │product_to_sql.py│    │ running_main.py │        │
│  └─────────────────┘    └─────────────────┘    └─────────────────┘        │
│           │                       │                       │                │
│           └───────────────────────┼───────────────────────┘                │
│                                   │                                        │
│  ┌─────────────────────────────────┼─────────────────────────────────────┐  │
│  │                          外部依赖模块                                  │  │
│  │                                                                       │  │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  │  │
│  │  │  文件系统   │  │  数据库系统  │  │  时间管理   │  │  数据处理   │  │  │
│  │  │   (OS)      │  │   (MySQL)   │  │ (datetime)  │  │ (pandas)    │  │  │
│  │  └─────────────┘  └─────────────┘  └─────────────┘  └─────────────┘  │  │
│  └───────────────────────────────────────────────────────────────────────┘  │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

数据流结构图：
┌─────────────────────────────────────────────────────────────────────────────┐
│                              数据流向结构                                    │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  输入数据源                   处理层                       输出目标          │
│  ┌─────────────┐    ┌─────────────────────────────────┐    ┌─────────────┐  │
│  │             │    │                                 │    │             │  │
│  │ 瑞锐产品数据 │───▶│  数据读取 → 标准化 → 验证 → 保存  │───▶│  股票持仓表  │  │
│  │ (CSV文件)   │    │                                 │    │ (stock)     │  │
│  │             │    │                                 │    │             │  │
│  └─────────────┘    │                                 │    └─────────────┘  │
│                     │                                 │                     │
│  ┌─────────────┐    │                                 │    ┌─────────────┐  │
│  │             │    │                                 │    │             │  │
│  │ 兴业产品数据 │───▶│  数据读取 → 标准化 → 验证 → 保存  │───▶│  期货持仓表  │  │
│  │ (CSV文件)   │    │                                 │    │ (future)    │  │
│  │             │    │                                 │    │             │  │
│  └─────────────┘    │                                 │    └─────────────┘  │
│                     │                                 │                     │
│  ┌─────────────┐    │                                 │    ┌─────────────┐  │
│  │             │    │                                 │    │             │  │
│  │ 仁瑞产品数据 │───▶│  数据读取 → 标准化 → 验证 → 保存  │───▶│  产品信息表  │  │
│  │ (CSV文件)   │    │                                 │    │ (info)      │  │
│  │             │    │                                 │    │             │  │
│  └─────────────┘    └─────────────────────────────────┘    └─────────────┘  │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

类继承结构图：
┌─────────────────────────────────────────────────────────────────────────────┐
│                              类结构关系                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  基础功能函数 (product_to_sql.py)                                           │
│  ┌─────────────────────────────────────────────────────────────────────────┐ │
│  │ standardize_column_names_stock()                                        │ │
│  │ standardize_column_names_future()                                       │ │
│  │ standardize_column_names_info()                                         │ │
│  └─────────────────────────────────────────────────────────────────────────┘ │
│                                    │                                        │
│                                    ▼                                        │
│  产品处理类                                                                    │
│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐        │
│  │ rrProduct_to_sql│    │ xyProduct_to_sql│    │renrProduct_to_sql│        │
│  │                 │    │                 │    │                 │        │
│  │ - product_type  │    │ - product_type  │    │ - product_type  │        │
│  │ - is_daily      │    │ - is_daily      │    │ - is_daily      │        │
│  │                 │    │                 │    │                 │        │
│  │ + __init__()    │    │ + __init__()    │    │ + __init__()    │        │
│  │ + stockHolding_ │    │ + read_csv_file │    │ + read_csv_file │        │
│  │   saving()      │    │ + stockHolding_ │    │ + stockHolding_ │        │
│  │ + futureHolding │    │   saving()      │    │   saving()      │        │
│  │   saving()      │    │ + futureHolding │    │ + InfoHolding_  │        │
│  │ + InfoHolding_  │    │   saving()      │    │   saving()      │        │
│  │   saving()      │    │ + InfoHolding_  │    │ + futureHolding │        │
│  │ + rr_sql_saving │    │   saving()      │    │   saving()      │        │
│  │   _main()       │    │ + xy_sql_saving │    │ + renrui_sql_   │        │
│  │                 │    │   _main()       │    │   saving_main() │        │
│  └─────────────────┘    └─────────────────┘    └─────────────────┘        │
│                                    │                                        │
│                                    ▼                                        │
│  运行控制函数 (running_main.py)                                              │
│  ┌─────────────────────────────────────────────────────────────────────────┐ │
│  │ dailydata_getting()                                                     │ │
│  │ temptable_manage()                                                      │ │
│  │ rr_running_main()                                                       │ │
│  │ xy_running_main()                                                       │ │
│  │ renr_running_main()                                                     │ │
│  │ xy_future_running_main()                                                │ │
│  │ renr_future_running_main()                                              │ │
│  └─────────────────────────────────────────────────────────────────────────┘ │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

================================================================================
                                6. 配置说明
================================================================================

6.1 路径配置文件 (productInfo_path_config.json)：
- components.data_source.mode: 数据源模式 ("sql" 或 "local")
- main_folder: 主文件夹配置，包含磁盘路径和基础路径
- sub_folder: 子文件夹配置，定义各种数据类型的路径映射

6.2 SQL表结构配置 (productInfo_sql.yaml)：
包含6个表的配置：stock_temp, info_temp, future_temp, stock, info, future
每个表配置包含：table_name, db_url, chunk_size, workers, private_keys, schema

================================================================================
                                7. 使用说明
================================================================================

7.1 运行方式：
- 直接运行：python running_main.py
- 批处理：running_main.bat

7.2 配置修改：
- 数据源模式：修改productInfo_path_config.json中的"mode"字段
- 文件路径：修改main_folder和sub_folder中的路径配置
- 数据库配置：修改productInfo_sql.yaml中的db_url和相关参数

7.3 时间控制：
- 9:15前：创建临时表，准备数据
- 9:15-15:30：执行数据保存
- 15:30后：保存每日数据到正式表

================================================================================
                                8. 注意事项
================================================================================

1. 文件依赖：确保输入数据文件存在且格式正确
2. 数据库连接：确保数据库服务正常运行
3. 权限要求：确保对输入文件夹有读取权限，对数据库有写入权限
4. 异常处理：系统会捕获异常并继续处理其他产品
5. 性能考虑：大量数据时注意内存使用，可调整chunk_size和workers参数

================================================================================
                                9. 维护说明
================================================================================

1. 添加新产品：添加新的产品处理类和运行函数，更新配置文件
2. 修改数据格式：更新标准化函数和SQL表结构配置
3. 数据库迁移：更新db_url，确保表结构正确
4. 日志监控：监控控制台输出，检查数据完整性

================================================================================
                                文档结束
================================================================================

创建时间：2024年
版本：1.0
